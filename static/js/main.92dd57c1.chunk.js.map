{"version":3,"sources":["components/form.js","components/cloud.js","components/result.js","App.js","serviceWorker.js","index.js"],"names":["Form","cb","useState","value","setValue","className","onSubmit","event","preventDefault","type","name","placeholder","onChange","target","Cloud","Result","arr","val","src","alt","App","React","setArr","APIKEY","city","fetch","method","mode","headers","then","response","ok","json","Error","statusText","data","array","push","city_name","temp","join","catch","error","console","log","length","split","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wOA0BeA,MAxBf,YAAuB,IAAPC,EAAM,EAANA,GAAM,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,KASpB,OACE,0BAAMC,UAAU,cAAcC,SAPhC,SAAuBC,GACrBA,EAAMC,iBACNP,EAAGE,GACHC,EAAS,MAKP,2BACEK,KAAK,OACLC,KAAK,UACLC,YAAY,kBACZR,MAAOA,EACPS,SAAU,SAAAL,GAAK,OAAIH,EAASG,EAAMM,OAAOV,UAE3C,4BAAQE,UAAU,UAAUI,KAAK,UAAjC,YCFSK,MAhBf,WACE,OACE,6BACE,yBAAKT,UAAU,WACb,yBAAKA,UAAU,WAEjB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,WAEjB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aCDRU,MATf,SAAgBC,GACd,OACE,yBAAKX,UAAU,UACb,8BAAOW,EAAIC,IAAI,GAAK,IAAMD,EAAIC,IAAI,GAAlC,SACA,yBAAKC,IAAI,kBAAkBC,IAAI,U,MC0CtBC,MA1Cf,WAAgB,IAAD,EACSC,IAAMnB,SAAS,IADxB,mBACNc,EADM,KACDM,EADC,KAGPC,EAAS,mCAwBf,OACE,yBAAKlB,UAAU,WACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMJ,GA1BZ,SAAuBuB,GACrBC,MAAM,+CAAD,OAC4CD,EAD5C,iBACyDD,GAC5D,CACEG,OAAQ,MACRC,KAAM,OACNC,QAAS,CACP,eAAgB,qCAInBC,MAAK,SAAAC,GACJ,GAAIA,EAASC,GAAI,OAAOD,EAASE,OACjC,MAAM,IAAIC,MAAM,QAASH,EAASI,eAEnCL,MAAK,SAAAM,GACJ,IAAIC,EAAQ,GACZA,EAAMC,KAAKF,EAAKA,KAAK,GAAGG,UAAWH,EAAKA,KAAK,GAAGI,MAChDjB,EAAOc,EAAMI,KAAK,SAEnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,SAOzB1B,EAAI6B,OACH,kBAAC,EAAD,CAAQ5B,IAAKD,EAAI8B,MAAM,OAEvB,kBAAC,EAAD,CAAQ7B,IAjCA,CAAC,UAAW,SCIV8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBAAE,EAAF,MAAYC,SAASC,eAAe,SD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.92dd57c1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction Form({ cb }) {\n  let [value, setValue] = useState(\"\");\n\n  function submitHandler(event) {\n    event.preventDefault();\n    cb(value);\n    setValue(\"\");\n  }\n\n  return (\n    <form className=\"search-form\" onSubmit={submitHandler}>\n      <input\n        type=\"text\"\n        name=\"country\"\n        placeholder=\"Enter city name\"\n        value={value}\n        onChange={event => setValue(event.target.value)}\n      ></input>\n      <button className=\"mdc-btn\" type=\"submit\">\n        search\n      </button>\n    </form>\n  );\n}\nexport default Form;\n","import React from \"react\";\n\nfunction Cloud() {\n  return (\n    <div>\n      <div className=\"opacity\">\n        <div className=\"cloud\"></div>\n      </div>\n      <div className=\"opacity\">\n        <div className=\"cloud\"></div>\n      </div>\n      <div className=\"opacity\">\n        <div className=\"cloud\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Cloud;\n","import React from \"react\";\n\nfunction Result(arr) {\n  return (\n    <div className=\"result\">\n      <span>{arr.val[0] + \" \" + arr.val[1]}Â°c</span>\n      <img src=\"img/weather.png\" alt=\"img\" />\n    </div>\n  );\n}\n\nexport default Result;\n","import React from \"react\";\nimport Form from \"./components/form\";\nimport Cloud from \"./components/cloud\";\nimport Result from \"./components/result\";\nimport \"./App.css\";\n\nfunction App() {\n  const [arr, setArr] = React.useState(\"\");\n  const weather = [\"Weather\", \"\"];\n  const APIKEY = \"a87b44b33c6149de88819638ea03ec0c\";\n\n  function getCountyDate(city) {\n    fetch(\n      `https://api.weatherbit.io/v2.0/current?city=${city},&key=${APIKEY}`,\n      {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n      }\n    )\n      .then(response => {\n        if (response.ok) return response.json();\n        throw new Error(\"Error\", response.statusText);\n      })\n      .then(data => {\n        let array = [];\n        array.push(data.data[0].city_name, data.data[0].temp);\n        setArr(array.join(\" \"));\n      })\n      .catch(error => console.log(error));\n  }\n  return (\n    <div className=\"section\">\n      <div className=\"container\">\n        <Cloud />\n        <Form cb={getCountyDate} />\n        {arr.length ? (\n          <Result val={arr.split(\" \")} />\n        ) : (\n          <Result val={weather} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}